# Copyright (c) 2022 Project CHIP Authors
# Copyright 2024 NXP
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/nxp_sdk.gni")

#allows to get common NXP SDK gn options
import("${nxp_sdk_build_root}/nxp_sdk.gni")

# Allows to get various RT gn options
import("${nxp_sdk_build_root}/${nxp_sdk_name}/rt_sdk.gni")
template("bt_ble_target") {
  if (defined(invoker.nxp_sdk_root)) {
    nxp_sdk_root = invoker.nxp_sdk_root
  }

  assert(nxp_sdk_root != "", "nxp_sdk_root must be specified")
  bt_ble_target_name = target_name

  config("${bt_ble_target_name}_warnings") {
    cflags = [
      "-Wno-maybe-uninitialized",
      "-Wno-string-concatenation",
    ]
  }

  config("${bt_ble_target_name}_config") {
    cflags = []
    defines = []
    if (defined(invoker.cflags)) {
      cflags += invoker.cflags
    }

    bt_ble_include_dirs = [
      #fatfs required for ethermind
      "${nxp_sdk_root}/middleware/fatfs/source",

      #edgefast_bluetooth
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/include",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/include/sys",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/porting",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/porting/fifo",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/porting/net",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/porting/thread",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/porting/slist",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/porting/work",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/porting/queue",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/impl/ethermind/crypto",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/impl/ethermind/host",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/impl/ethermind/platform",

      #ethermind
      "${nxp_sdk_root}/middleware/wireless/ethermind/bluetooth/export/include",
      "${nxp_sdk_root}/middleware/wireless/ethermind/bluetooth/export/eOSAL",
      "${nxp_sdk_root}/middleware/wireless/ethermind/bluetooth/export/extension",
      "${nxp_sdk_root}/middleware/wireless/ethermind/port/pal/mcux/bluetooth",
      "${nxp_sdk_root}/middleware/wireless/ethermind/port/pal/mcux/bluetooth/controller",
      "${nxp_sdk_root}/middleware/wireless/ethermind/port/pal/mcux/ethal",
      "${nxp_sdk_root}/middleware/wireless/ethermind/port/osal/src/freertos",
      "${nxp_sdk_root}/middleware/wireless/ethermind/bluetooth/private/lib/mcux/default/config",
      "${nxp_sdk_root}/middleware/wireless/ethermind/bluetooth/private/protocols/sm",
      "${nxp_sdk_root}/middleware/wireless/ethermind/bluetooth/private/protocols/sdp",
      "${nxp_sdk_root}/middleware/wireless/ethermind/bluetooth/private/protocols/dbase",
      "${nxp_sdk_root}/middleware/wireless/ethermind/bluetooth/private/protocols/rfcomm",
      "${nxp_sdk_root}/middleware/wireless/ethermind/bluetooth/private/protocols/bnep",
      "${nxp_sdk_root}/middleware/wireless/ethermind/bluetooth/private/protocols/avdtp",
      "${nxp_sdk_root}/middleware/wireless/ethermind/bluetooth/private/protocols/avctp",
      "${nxp_sdk_root}/middleware/wireless/ethermind/bluetooth/private/protocols/smp",
      "${nxp_sdk_root}/middleware/wireless/ethermind/bluetooth/private/protocols/obex",
      "${nxp_sdk_root}/middleware/wireless/ethermind/bluetooth/private/protocols/mcap",
      "${nxp_sdk_root}/middleware/wireless/ethermind/bluetooth/private/protocols/att",
      "${nxp_sdk_root}/middleware/wireless/ethermind/bluetooth/private/protocols/hci_1.2",
      "${nxp_sdk_root}/middleware/wireless/ethermind/bluetooth/private/utils/aes_cmac",

      # Transceiver
      "${nxp_sdk_root}/middleware/wireless/ethermind/port/pal/mcux/bluetooth/controller",

      # SDK hook requires to build the BLEManagerImpl.cpp from Zephyr
      "${nxp_sdk_build_root}/${nxp_sdk_name}/sdk_hook",
    ]
    libs = []

    if (nxp_ot_spinel_interface_link == "hci_spinel_single_uart") {
      # Allows to wrap hci_uart functions to another implementation.
      # The goal is to have hci and spinel encapsulated in hdlc frames.
      # To view the content of new implementations, the code of spinel_hci_hdlc.cpp should be checked
      ldflags = [
        "-Wl,--defsym,hci_uart_write_data=__wrap_hci_uart_write_data",
        "-Wl,--wrap=hci_uart_bt_init",
        "-Wl,--wrap=hci_uart_bt_shutdown",
        "-Wl,--wrap=hci_uart_init",
      ]
      bt_ble_include_dirs += [
        "${nxp_sdk_root}/middleware/wireless/ethermind/port/pal",

        # SDK hook to be able to undef the value of EM_HAVE_STATIC_DECL
        # so that we can do an extern of the hci_uart_state variable
        "${nxp_sdk_build_root}/${nxp_sdk_name}/sdk_hook/bt_pal",
      ]
    } else {
      defines += [ "HAL_UART_DMA_ENABLE=1" ]
      bt_ble_include_dirs +=
          [ "${nxp_sdk_root}/middleware/wireless/ethermind/port/pal/mcux" ]
    }

    bt_ble_include_dirs += [
      #sdk hook for fatfs config file required for ethermind include files
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/impl/ethermind/platform/configs",
    ]    

    defines += [
      #BT config,
      "CONFIG_BT_PERIPHERAL=1",
      "CONFIG_BT_GATT_DYNAMIC_DB=1",
      "CONFIG_BT_SETTINGS=0",
      "CONFIG_BT_HOST_CRYPTO=1",
      "CONFIG_BT_KEYS_OVERWRITE_OLDEST=1",
      "BT_BLE_PLATFORM_INIT_ESCAPE",
      "BT_CHIP_SUPPORT",

      #increase the Max transmission Unit (MTU) to 247 as defined in the Matter specific
      # BT_L2CAP_RX_MTU = CONFIG_BT_BUF_ACL_RX_SIZE - BT_L2CAP_HDR_SIZE with BT_L2CAP_HDR_SIZE = 4
      # therefore define CONFIG_BT_BUF_ACL_RX_SIZE to 251
      "CONFIG_BT_BUF_ACL_RX_SIZE=251",

      #BT_L2CAP_TX_MTU = CONFIG_BT_L2CAP_TX_MTU
      # so define CONFIG_BT_L2CAP_TX_MTU to 247
      "CONFIG_BT_L2CAP_TX_MTU=247",

      "USB_HOST_CONFIG_EHCI=2",
      # CONTROLLER_ID define as kUSB_ControllerEhci0 (= 2U)
      "CONTROLLER_ID=2U",
      "CONFIG_BT_DEVICE_NAME_DYNAMIC=1",
      # Increase hci_rx_thread stack size (1024 by default) to fix stack overflow during commissining
      "CONFIG_BT_RX_STACK_SIZE=1536",
      "LOG_ENABLE_ASYNC_MODE=1",
      "LOG_MAX_ARGUMENT_COUNT=10",
      "LOG_ENABLE_OVERWRITE=1",

      #Support for BLE only
      "CFG_BLE",
    ]

    # Now add our "system-header" include dirs
    foreach(include_dir, bt_ble_include_dirs) {
      cflags += [ "-isystem" + rebase_path(include_dir, root_build_dir) ]
    }

    #Adding pre-include files
    cflags += [ "-include" + rebase_path(
                    "${chip_root}/third_party/nxp/nxp_matter_support/gn_build/rt_sdk/transceiver/edgefast_bluetooth_config.h",
                    root_build_dir) ]
  }

  source_set(bt_ble_target_name) {
    forward_variables_from(invoker, "*")
    sources = [
      # SDK hook for ethermind
      #"${nxp_sdk_build_root}/${nxp_sdk_name}/sdk_hook/btsnoop_pl.c",
      #edgefast_bluetooth
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/impl/ethermind/bt_db_gen.c",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/impl/ethermind/common/addr.c",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/impl/ethermind/host/bt_pal_addr.c",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/impl/ethermind/host/bt_pal_adv.c",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/impl/ethermind/host/bt_pal_att.c",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/impl/ethermind/host/bt_pal_buf.c",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/impl/ethermind/host/bt_pal_conn.c",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/impl/ethermind/host/bt_pal_crypto.c",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/impl/ethermind/host/bt_pal_gatt.c",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/impl/ethermind/host/bt_pal_hci_core.c",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/impl/ethermind/host/bt_pal_id.c",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/impl/ethermind/host/bt_pal_l2cap.c",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/impl/ethermind/host/bt_pal_settings.c",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/impl/ethermind/host/bt_pal_smp.c",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/impl/ethermind/host/bt_pal_smp_null.c",

      #"${nxp_sdk_root}/middleware/edgefast_bluetooth/source/impl/ethermind/host/bt_pal_ecc.c",
      #"${nxp_sdk_root}/middleware/edgefast_bluetooth/source/impl/ethermind/host/bt_pal_keys.c",
      #"${nxp_sdk_root}/middleware/edgefast_bluetooth/source/impl/ethermind/host/bt_pal_keys_br.c",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/impl/ethermind/host/bt_pal_uuid.c",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/impl/ethermind/platform/bt_ble_platform.c",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/impl/ethermind/platform/bt_ble_settings.c",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/porting/atomic_c.c",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/porting/net/buf.c",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/porting/net/buf_simple.c",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/porting/porting.c",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/porting/sem/sem.c",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/porting/slab/slab.c",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/porting/slist/slist.c",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/porting/work/work.c",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/porting/queue/queue.c",
      "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/porting/thread/thread.c",
      "${nxp_sdk_root}/middleware/wireless/ethermind/bluetooth/export/extension/BT_common_pl.c",
      "${nxp_sdk_root}/middleware/wireless/ethermind/bluetooth/export/extension/aes_cmac_pl.c",
      "${nxp_sdk_root}/middleware/wireless/ethermind/bluetooth/export/extension/device_queue_pl.c",
      "${nxp_sdk_root}/middleware/wireless/ethermind/bluetooth/export/extension/sm_pl.c",
      "${nxp_sdk_root}/middleware/wireless/ethermind/bluetooth/export/extension/sm_ssp_pl.c",
      "${nxp_sdk_root}/middleware/wireless/ethermind/bluetooth/export/extension/smp_pl.c",
      "${nxp_sdk_root}/middleware/wireless/ethermind/port/osal/src/freertos/EM_serial.c",
      "${nxp_sdk_root}/middleware/wireless/ethermind/port/osal/src/freertos/EM_timer.c",
      "${nxp_sdk_root}/middleware/wireless/ethermind/port/pal/mcux/bluetooth/BT_status_pl.c",
      "${nxp_sdk_root}/middleware/wireless/ethermind/port/pal/mcux/bluetooth/BT_storage_pl.c",
      "${nxp_sdk_root}/middleware/wireless/ethermind/port/pal/mcux/bluetooth/btsnoop_pl.c",
      "${nxp_sdk_root}/middleware/wireless/ethermind/port/pal/mcux/bluetooth/ht_read_task_pl.c",

      #ethermind files
      "${nxp_sdk_root}/middleware/wireless/ethermind/port/pal/mcux/bluetooth/sco_audio_pl.c",
      "${nxp_sdk_root}/middleware/wireless/ethermind/port/pal/mcux/bluetooth/write_task_pl.c",
      "${nxp_sdk_root}/middleware/wireless/ethermind/port/pal/mcux/ethal/ethal_config.c",

      #"${nxp_sdk_root}/middleware/wireless/ethermind/port/pal/mcux/bluetooth/littlefs_pl.c",
      "${nxp_sdk_root}/middleware/wireless/ethermind/port/pal/mcux/ethal/ethal_debug.c",

      #"${nxp_sdk_root}/middleware/wireless/ethermind/port/pal/mcux/ethal/ethal_fops.c",
      "${nxp_sdk_root}/middleware/wireless/ethermind/port/pal/mcux/ethal/ethal_os.c",
    ]
    
    sources += [ "${nxp_sdk_root}/middleware/edgefast_bluetooth/source/porting/fifo/fifo.c" ]

    if (!defined(configs)) {
      configs = []
    }

    # Relax warnings for third_party code.
    configs += [
      ":${bt_ble_target_name}_warnings",

      # Dependencies required to have the rand32.cpp file building
      # A dependency to <crypto/CHIPCryptoPAL.h> is required therefore add a dependency to below components
      "${chip_root}/src:includes",
      "${nxp_sdk_build_root}/${nxp_sdk_name}:lwip_rt_config",
      "${chip_root}/third_party/nlassert:nlassert_config",
    ]

    if (!defined(deps)) {
      deps = []
    }

    defines = 
        [ "vApplicationMallocFailedHook=vApplicationMallocFailedHookBTBLE" ]

    if (!defined(public_configs)) {
      public_configs = []
    }

    public_configs += [ ":${bt_ble_target_name}_config" ]
  }
}
