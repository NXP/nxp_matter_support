# Copyright (c) 2020 Project CHIP Authors
# Copyright 2023,2024 NXP
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("//build_overrides/chip.gni")
import("//build_overrides/openthread.gni")

import("${chip_root}/src/platform/device.gni")  # declares chip_enable_wifi
import("${chip_root}/src/platform/nxp/${nxp_platform}/args.gni")  # declares all
                                                                  # rt local
                                                                  # args
import("${nxp_sdk_build_root}/nxp_sdk.gni")  # declares some sdk args such as
                                             # nxp_enable_ot_cli

declare_args() {
  # Enables Matter over Ethernet support
  chip_enable_ethernet = false

  # transceiver lists
  iw416_transceiver = false
  k32w0_transceiver = false
  k32w0_transceiver_bin_path = rebase_path(
          "${chip_root}/third_party/openthread/ot-nxp/build_k32w061/ot_rcp_ble_hci_bb_single_uart_fc/bin/ot-rcp-ble-hci-bb-k32w061.elf.bin.h")
  w8801_transceiver = false
  iwx12_transceiver = false

  # Allows to enable OTW logs to see
  # firmware download logs for K32W0 transceiver
  otw_logs_enabled = false


  # KeyStorage enable only for RW61x
  #if(nxp_platform == "rt/rw61x"){
  #nxp_nvm_component = "key_storage"
  #}

  # Enable wifi PTA support
  wifi_enable_pta = false

  # Customize BLE advertising data at application layer,
  # instead of default Zephyr BLE manager implementation advertising data
  ble_adv_data_custom = false

  # RT platform name
  rt_platform = ""

  # Support or not assert component from the SDK
  sdk_fsl_assert_support = true

  # Defines the name of the nxp SDK driver target instance
  nxp_sdk_driver_target = ""

  # Enables Watchdog support
  use_watchdog = 0

  # Describe the transceiver detail flags
  nxp_transceiver_interface_detail = "WIFI_IW612_BOARD_MURATA_2EL_USD"

}

if (!defined(rt_fwk_platform)) {
  rt_fwk_platform = rt_platform
}

assert(nxp_sdk_root != "", "nxp_sdk_root must be specified")

if (rt_platform == "rt1060") {
  nxp_transceiver_interface_detail = "WIFI_IW612_BOARD_MURATA_2EL_M2"
}

if (k32w0_transceiver) {
  nxp_ot_spinel_interface_link = "hci_spinel_single_uart"
}

rt_sdk_freertos_kernel = "${nxp_sdk_root}/rtos/freertos/freertos-kernel"
CONN_FRAMEWORK_FILES_PATH = "${nxp_sdk_root}/middleware/wireless/framework"
CONN_FRAMEWORK_SERVICES_FILES_PATH = "${CONN_FRAMEWORK_FILES_PATH}/services"
CONN_FRAMEWORK_ZEPHYR_FILES_PATH = "${CONN_FRAMEWORK_FILES_PATH}/zephyr"

template("rt_transceiver") {
  config("${target_name}_config") {
    include_dirs = []
    _transceiver_include_dirs = []

    if (defined(invoker.include_dirs)) {
      include_dirs += invoker.include_dirs
    }
    if (iw416_transceiver || w8801_transceiver || iwx12_transceiver) {
      _transceiver_include_dirs += [
        # Transceiver files
        "${nxp_sdk_root}/middleware/wifi_nxp/wifidriver",
        "${nxp_sdk_root}/middleware/wifi_nxp/wifidriver/incl",
        "${nxp_sdk_root}/middleware/sdmmc/common",
        "${nxp_sdk_root}/middleware/sdmmc/sdio",
        "${nxp_sdk_root}/middleware/sdmmc/host/usdhc",
        "${nxp_sdk_root}/middleware/sdmmc/osa",
        "${nxp_sdk_root}/middleware/wifi_nxp/incl/wifidriver",
        "${nxp_sdk_root}/middleware/wifi_nxp/incl",
        "${nxp_sdk_root}/middleware/wifi_nxp/incl/wlcmgr",
        "${nxp_sdk_root}/middleware/wifi_nxp/port/osa",
        "${nxp_sdk_root}/middleware/wifi_nxp/incl/port/osa",
        "${nxp_sdk_root}/middleware/wifi_nxp/fwdnld_intf_abs",
        "${nxp_sdk_root}/middleware/wifi_nxp/sdio_nxp_abs/incl",
        "${nxp_sdk_root}/middleware/wifi_nxp/firmware_dnld",
        "${nxp_sdk_root}/middleware/wifi_nxp/wifi_bt_firmware/nw61x",
        "${nxp_sdk_root}/middleware/wifi_nxp/wifi_bt_firmware/IW416",
        "${nxp_sdk_root}/middleware/wifi_nxp/wifi_bt_firmware/8801",
        ]
    }

    libs = []

    if (defined(invoker.defines)) {
      defines += invoker.defines
    }

    cflags = []

    if (defined(invoker.cflags)) {
      cflags += invoker.cflags
    }

    # Now add our "system-header" include dirs
    foreach(include_dir, _transceiver_include_dirs) {
      cflags += [ "-isystem" + rebase_path(include_dir, root_build_dir) ]
    }
  }

  source_set(target_name) {
    forward_variables_from(invoker, "*")

    if (!defined(sources)) {
      sources = []
    }

    if (iw416_transceiver || w8801_transceiver || iwx12_transceiver) {
      sources += [
        # Transceiver files
        "${nxp_sdk_root}/middleware/sdmmc/common/fsl_sdmmc_common.c",
        "${nxp_sdk_root}/middleware/sdmmc/host/usdhc/non_blocking/fsl_sdmmc_host.c",
        "${nxp_sdk_root}/middleware/sdmmc/osa/fsl_sdmmc_osa.c",
        "${nxp_sdk_root}/middleware/sdmmc/sdio/fsl_sdio.c",
        "${nxp_sdk_root}/middleware/wifi_nxp/wifidriver/sdio.c",
        "${nxp_sdk_root}/middleware/wifi_nxp/wifi_bt_firmware/nw61x/nw61x_cpu12_se.c",
        "${nxp_sdk_root}/middleware/wifi_nxp/wifi_bt_firmware/IW416/IW416_cpu12.c",
        "${nxp_sdk_root}/middleware/wifi_nxp/wifi_bt_firmware/8801/8801_cpu1.c",
        "${nxp_sdk_root}/middleware/wifi_nxp/firmware_dnld/firmware_dnld.c",
        "${nxp_sdk_root}/middleware/wifi_nxp/fwdnld_intf_abs/fwdnld_intf_abs.c",
        "${nxp_sdk_root}/middleware/wifi_nxp/sdio_nxp_abs/fwdnld_sdio.c",
        "${nxp_sdk_root}/middleware/wifi_nxp/sdio_nxp_abs/mlan_sdio.c",
        ]
    }

    if (!defined(public_configs)) {
      public_configs = []
    }

    public_configs += [ ":${target_name}_config" ]
  }
}

template("rt_wifi") {
  config("${target_name}_config") {
    include_dirs = []

    if (defined(invoker.include_dirs)) {
      include_dirs += invoker.include_dirs
    }

    _wifi_include_dirs = [
      # Wi-Fi
      "${nxp_sdk_root}/middleware/wifi_nxp/incl",
      "${nxp_sdk_root}/middleware/wifi_nxp/incl/wifidriver",
      "${nxp_sdk_root}/middleware/wifi_nxp/incl/wlcmgr",
      "${nxp_sdk_root}/middleware/wifi_nxp/wifi_bt_firmware",
      "${nxp_sdk_root}/middleware/wifi_nxp/wifidriver",
      "${nxp_sdk_root}/middleware/wifi_nxp/wifidriver/incl",
      "${nxp_sdk_root}/middleware/wifi_nxp/wifidriver/wpa_supp_if/incl",
      "${nxp_sdk_root}/middleware/wifi_nxp/incl/port/net",
      "${nxp_sdk_root}/middleware/wifi_nxp/port/net",
      "${nxp_sdk_root}/middleware/wifi_nxp/port/osa",
      "${nxp_sdk_root}/middleware/wifi_nxp/incl/port/osa",
      ]
    

    libs = []

    if (defined(invoker.defines)) {
      defines += invoker.defines
    } else {
      defines = []
    }

    defines += [
      "CHIP_DEVICE_CONFIG_ENABLE_WPA",
    ]

    if (wifi_enable_pta) {
      defines += [ "WIFI_PTA_ENABLED=1" ]
    }

    cflags = []

    if (defined(invoker.cflags)) {
      cflags += invoker.cflags
    }

    # Now add our "system-header" include dirs
    foreach(include_dir, _wifi_include_dirs) {
      cflags += [ "-isystem" + rebase_path(include_dir, root_build_dir) ]
    }
  }

  source_set(target_name) {
    forward_variables_from(invoker, "*")

    if (!defined(sources)) {
      sources = []
    }

    sources += [
      # Wi-Fi
      "${nxp_sdk_root}/middleware/wifi_nxp/cli/cli_utils.c",
      "${nxp_sdk_root}/middleware/wifi_nxp/dhcpd/dhcp-server-main.c",
      "${nxp_sdk_root}/middleware/wifi_nxp/dhcpd/dhcp-server.c",
      "${nxp_sdk_root}/middleware/wifi_nxp/dhcpd/dns-server.c",
      "${nxp_sdk_root}/middleware/wifi_nxp/port/osa/osa_freertos.c",
      "${nxp_sdk_root}/middleware/wifi_nxp/port/osa/osa.c",
      "${nxp_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_11ac.c",
      "${nxp_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_11d.c",
      "${nxp_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_11h.c",
      "${nxp_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_11n.c",
      "${nxp_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_11n_aggr.c",
      "${nxp_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_11n_rxreorder.c",
      "${nxp_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_api.c",
      "${nxp_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_cfp.c",
      "${nxp_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_cmdevt.c",
      "${nxp_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_glue.c",
      "${nxp_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_init.c",
      "${nxp_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_join.c",
      "${nxp_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_misc.c",
      "${nxp_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_scan.c",
      "${nxp_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_shim.c",
      "${nxp_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_sta_cmd.c",
      "${nxp_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_sta_cmdresp.c",
      "${nxp_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_sta_event.c",
      "${nxp_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_sta_ioctl.c",
      "${nxp_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_sta_rx.c",
      "${nxp_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_txrx.c",
      "${nxp_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_uap_cmdevent.c",
      "${nxp_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_uap_ioctl.c",
      "${nxp_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_wmm.c",
      "${nxp_sdk_root}/middleware/wifi_nxp/wifidriver/wifi-debug.c",
      "${nxp_sdk_root}/middleware/wifi_nxp/wifidriver/wifi-mem.c",
      "${nxp_sdk_root}/middleware/wifi_nxp/wifidriver/wifi-uap.c",
      "${nxp_sdk_root}/middleware/wifi_nxp/wifidriver/wifi.c",
      "${nxp_sdk_root}/middleware/wifi_nxp/wifidriver/wifi_pwrmgr.c",
      "${nxp_sdk_root}/middleware/wifi_nxp/wlcmgr/wlan.c",
      "${nxp_sdk_root}/middleware/wifi_nxp/wlcmgr/wlan_txpwrlimit_cfg.c",
    ]

    if (!defined(public_configs)) {
      public_configs = []
    }

    public_configs += [ ":${target_name}_config" ]
  }
}

template("rt_sdk") {
  sdk_target_name = target_name

  config("${sdk_target_name}_config") {
    include_dirs = []

    if (defined(invoker.include_dirs)) {
      include_dirs += invoker.include_dirs
    }

    # We want to treat SDK headers as system headers, so that warnings in those
    # headers are not fatal.  Therefore don't add them directly to include_dirs;
    # we will add them to cflags below instead.
    _sdk_include_dirs = [
      #freertos includes
      "${rt_sdk_freertos_kernel}/include",

      #CMSIS includes
      "${nxp_sdk_root}/arch/arm/CMSIS/Core/Include",

      #SDK components
      "${nxp_sdk_root}/components/uart",
      "${nxp_sdk_root}/components/spi",
      "${nxp_sdk_root}/components/serial_manager",
      "${nxp_sdk_root}/components/lists",
      "${nxp_sdk_root}/components/osa",
      "${nxp_sdk_root}/components/osa/config", # fsl_os_abstraction_config.h
      "${nxp_sdk_root}/components/common_task",
      "${nxp_sdk_root}/components/log",
      "${nxp_sdk_root}/components/timer_manager",
      "${nxp_sdk_root}/components/timer",
      "${nxp_sdk_root}/components/internal_flash",
      "${nxp_sdk_root}/components/button",
      "${nxp_sdk_root}/components/gpio",
      "${nxp_sdk_root}/components/phy/device/phyksz8081",
      "${nxp_sdk_root}/components/phy",
      "${nxp_sdk_root}/components/wifi_bt_module/AzureWave/tx_pwr_limits",
      "${nxp_sdk_root}/components/wifi_bt_module/Murata/tx_pwr_limits",
      "${nxp_sdk_root}/components/wifi_bt_module/incl",
      "${nxp_sdk_root}/components/messaging",
      "${nxp_sdk_root}/components/mem_manager",
      "${nxp_sdk_root}/components/flash/mflash",
      "${nxp_sdk_root}/components/time_stamp",

      #Framework files
      "${CONN_FRAMEWORK_SERVICES_FILES_PATH}/FunctionLib",
      "${CONN_FRAMEWORK_FILES_PATH}/Common",
      "${CONN_FRAMEWORK_FILES_PATH}/platform/${rt_fwk_platform}",
      "${CONN_FRAMEWORK_FILES_PATH}/platform/include",
      "${CONN_FRAMEWORK_SERVICES_FILES_PATH}/FileSystem",
      "${CONN_FRAMEWORK_FILES_PATH}/FileCache",
      "${CONN_FRAMEWORK_FILES_PATH}/FSAbstraction",
      "${CONN_FRAMEWORK_FILES_PATH}/KeyStorage",

      #"${nxp_sdk_root}/middleware/wireless/framework/DBG",

      # Wifi config architecture rework, use this config files for Matter application
      "${nxp_sdk_build_root}/${nxp_sdk_name}/transceiver/"

    ]

    #OtaSupport
    if (chip_enable_ota_requestor) {
      _sdk_include_dirs += [
        "${CONN_FRAMEWORK_SERVICES_FILES_PATH}/OtaSupport/Interface",
        "${CONN_FRAMEWORK_SERVICES_FILES_PATH}/OtaSupport/Source",
      ]
    }

    if (nxp_nvm_component != "nvs"){
      _sdk_include_dirs += [
        #littlefs
        "${nxp_sdk_root}/middleware/littlefs",
      ]
    }

    if (nxp_nvm_component == "nvm_fwk") {
      _sdk_include_dirs +=
          [ "${CONN_FRAMEWORK_SERVICES_FILES_PATH}/NVM/Interface" ]
    }

    else if (nxp_nvm_component == "nvs"){
      _sdk_include_dirs += [
       "${CONN_FRAMEWORK_ZEPHYR_FILES_PATH}/include",
       "${CONN_FRAMEWORK_ZEPHYR_FILES_PATH}/include/zephyr/fs",
       "${CONN_FRAMEWORK_ZEPHYR_FILES_PATH}/include/zephyr/settings",
       "${CONN_FRAMEWORK_ZEPHYR_FILES_PATH}/include/zephyr/sys",
       "${CONN_FRAMEWORK_ZEPHYR_FILES_PATH}/port/common",
       "${CONN_FRAMEWORK_ZEPHYR_FILES_PATH}/port/nvs",
       "${CONN_FRAMEWORK_ZEPHYR_FILES_PATH}/port/settings",
       "${CONN_FRAMEWORK_ZEPHYR_FILES_PATH}/subsys/fs/nvs",
       "${CONN_FRAMEWORK_ZEPHYR_FILES_PATH}/subsys/settings/include/",
      ]
       _sdk_include_dirs += [
          "${CONN_FRAMEWORK_FILES_PATH}/platform/Common",
       ]
    }

    libs = []

    defines = [
      "__STARTUP_CLEAR_BSS",
      "__STARTUP_INITIALIZE_NONCACHEDATA",
      "__STARTUP_INITIALIZE_RAMFUNCTION",

      #"SERIAL_MANAGER_NON_BLOCKING_MODE=1",
      "SERIAL_MANAGER_TASK_HANDLE_RX_AVAILABLE_NOTIFY=1",
      "SERIAL_MANAGER_RING_BUFFER_FLOWCONTROL=1",
      "SDK_OS_FREE_RTOS",

      #Enable the OSA startup task
      "OSA_USED",
      "FSL_OSA_TASK_ENABLE",
      "FSL_OSA_ALLOCATED_HEAP=0",

      #Startup task stack size  todo :to remove
      "gMainThreadStackSize_c=4096",
      "XIP_EXTERNAL_FLASH=1",
      "XIP_BOOT_HEADER_ENABLE=1",
      "FSL_SDK_ENABLE_DRIVER_CACHE_CONTROL=1",
      "SDK_COMPONENT_INTEGRATION=1",
      "FSL_DRIVER_TRANSFER_DOUBLE_WEAK_IRQ=0",

      # Serial Manager already in Non blocking state by default
      #    but can be changed with other compile switch (DEBUG_CONSOLE_TRANSFER_NON_BLOCKING),
      #    so better to explicitly set to 1 here except when DEBUG_CONSOLE_TRANSFER_NON_BLOCKING is set
      #    "SERIAL_MANAGER_NON_BLOCKING_MODE=1",
      # For Debug Console, This flag is not use for Debug Console Light
      "DEBUG_CONSOLE_TRANSFER_NON_BLOCKING",
      "HAL_UART_ADAPTER_FIFO=1",
      "SDK_DEBUGCONSOLE_UART=1",
      "SERIAL_PORT_TYPE_UART=1",
      "CONFIG_ARM=1",
      "SERIAL_MANAGER_TASK_STACK_SIZE=4048",

      #LWIP common options
      "USE_RTOS=1",
      "BUTTON_SHORT_PRESS_THRESHOLD=500",
      "BUTTON_LONG_PRESS_THRESHOLD=2000",

      #Multithread tests
      "PRINTF_ADVANCED_ENABLE=1",

      "USB_HOST_CONFIG_EHCI=2",
    ]

    if (nxp_nvm_component == "nvs"){
      # define gAppNvsInternalFlash_c = 0 to be sure it will not be define as 1 in the framework (NVS/Interface/port/nvs_port.h)
      defines += [ "gAppNvsExternalFlash_c = 1", "gNvsExternalFlash_d = 1", "gAppNvsInternalFlash_c = 0", "CONFIG_NVS_LOOKUP_CACHE = 1",
        "CONFIG_NVS_LOOKUP_CACHE_SIZE = 1024", "CONFIG_SETTINGS_DYNAMIC_HANDLERS=1", "CONFIG_SETTINGS_RUNTIME=1"]
    }

    if (use_watchdog != 0) {
      defines += [ "WATCHDOG_ALLOWED" ]
    }

    if (nxp_nvm_component == "nvm_fwk") {
      defines += [
        #NVM flags
        "gNvStorageIncluded_d=1",
        "gNvTableKeptInRam_d=1",
        "NVM_NO_COMPONNET=1",
      ]
    }

    if (nxp_nvm_component == "littlefs" || nxp_nvm_component == "key_storage") {
      defines += [
        "LFS_THREADSAFE=1",
        "LFS_NO_DEBUG",
        "LFS_NO_ERROR",
        "LFS_NO_WARN",
      ]
    }

    if(ble_adv_data_custom){
      # to customize BLE advertising data
      defines += [ "CONFIG_CHIP_CUSTOM_BLE_ADV_DATA=1"]
    }

    if (chip_enable_wifi || chip_enable_ethernet) {
      defines += [
        "SDK_DEBUGCONSOLE=1",
        "MCUXPRESSO_SDK",
        "PRINTF_FLOAT_ENABLE=0",
        "DEBUG",
        "__GCC",
        "__USE_CMSIS",
        "PRINT_FLOAT_ENABLE=0",
        "CR_INTEGER_PRINTF",

        # No OSA main task
        "FSL_OSA_MAIN_FUNC_ENABLE=0",
      ]
      if (chip_enable_openthread) {
        defines += [ "CONFIG_MAX_IPV6_ADDRESSES=8" ]
      } else {
        defines += [ "CONFIG_MAX_IPV6_ADDRESSES=5" ]
      }
    }

    if (chip_enable_ethernet) {
      defines += [ "FSL_FEATURE_PHYKSZ8081_USE_RMII50M_MODE" ]
    }

    if (nxp_enable_pairing_autostart) {
      defines += [ "CHIP_DEVICE_CONFIG_ENABLE_PAIRING_AUTOSTART=1" ]
    } else {
      defines += [ "CHIP_DEVICE_CONFIG_ENABLE_PAIRING_AUTOSTART=0" ]
    }

    if (iw416_transceiver) {
      defines += [
        "WIFI_IW416_BOARD_AW_AM510_USD",
        "SDIO_ENABLED",
      ]
    }

    if (w8801_transceiver) {
      defines += [
        "WIFI_88W8801_BOARD_MURATA_2DS_USD",
        "SDIO_ENABLED",
      ]
    }

    if (iwx12_transceiver) {
      defines += [
        nxp_transceiver_interface_detail,
        "SDIO_ENABLED",
      ]
    }

    if (k32w0_transceiver) {
      defines += [ "K32W061_TRANSCEIVER" ]
      defines += [ "BOARD_OTW_K32W0_PIN_INIT" ]

      #Framework OTW defines to locate transceiver binary header
      defines += [ "K32W0_RCP_BINARY_H_FILE=\"${k32w0_transceiver_bin_path}\"" ]

      #SDK defines for OTW
      defines += [ "HAL_UART_DMA_ENABLE=1" ]
      _sdk_include_dirs +=
          [ "${CONN_FRAMEWORK_SERVICES_FILES_PATH}/OTW/Interface" ]
      if (otw_logs_enabled) {
        defines += [ "OTW_LOG_ENABLED=1" ]
      }
    }

    if (nxp_software_version != "") {
      defines +=
          [ "NXP_CONFIG_DEVICE_SOFTWARE_VERSION=${nxp_software_version}" ]
    }

    if (nxp_software_version_string != "") {
      defines += [ "NXP_CONFIG_DEVICE_SOFTWARE_VERSION_STRING=\"${nxp_software_version_string}\"" ]
    }

    if (defined(invoker.defines)) {
      defines += invoker.defines
    }
    cflags = []

    if (defined(invoker.cflags)) {
      cflags += invoker.cflags
    }

    cflags += [
      "-Wno-unused-function",
      "-Wno-conversion",
      "-Wno-sign-compare",
      "-Wno-shadow",
      "-Wno-empty-body",
      "-Wno-implicit-fallthrough",
      "-Wno-stringop-truncation",
      "-Wno-unused-variable",
      "-Wno-format-truncation",
      "-Wno-address",
    ]

    if (chip_enable_openthread) {
      defines += [ 
        "CHIP_DEVICE_CONFIG_ENABLE_THREAD=1",
        "CONFIG_NET_L2_OPENTHREAD=1",
      ]
    }

    if (chip_enable_ble) {
      defines += [ 
        "CHIP_DEVICE_CONFIG_ENABLE_CHIPOBLE=1",
        "CONFIG_BT=1",
      ]
    }

    if (chip_enable_wifi) {
      defines += [ 
        "CHIP_DEVICE_CONFIG_ENABLE_WIFI_STATION=1",
        "CONFIG_CHIP_WIFI=1",
      ]
    }

    # Now add our "system-header" include dirs
    foreach(include_dir, _sdk_include_dirs) {
      cflags += [ "-isystem" + rebase_path(include_dir, root_build_dir) ]
    }
  }

  # TODO - Break up this monolith and make it configurable.
  source_set(sdk_target_name) {
    forward_variables_from(invoker, "*")

    if (!defined(sources)) {
      sources = []
    }
    else {
      # If NVS is enabled, remove the default peripherals.c from sources (file depends on littlefs).
      if((nxp_nvm_component == "nvs")) {
        # Here we iterate through the invoker's sources list, this ensures that the file
        # is only being removed if it was present in the list.
        foreach(file, sources) {
          if (file == "${nxp_sdk_matter_support_root}/examples/platform/${nxp_platform}/board/peripherals.c") {
            sources -= ["${nxp_sdk_matter_support_root}/examples/platform/${nxp_platform}/board/peripherals.c"]
          }
        }
      }
    }

    sources += [
      #freertos files
      "${rt_sdk_freertos_kernel}/croutine.c",
      "${rt_sdk_freertos_kernel}/event_groups.c",
      "${rt_sdk_freertos_kernel}/list.c",
      "${rt_sdk_freertos_kernel}/queue.c",
      "${rt_sdk_freertos_kernel}/stream_buffer.c",
      "${rt_sdk_freertos_kernel}/tasks.c",
      "${rt_sdk_freertos_kernel}/timers.c",

      #SDK components
      "${nxp_sdk_root}/components/button/fsl_component_button.c",
      "${nxp_sdk_root}/components/lists/fsl_component_generic_list.c",
      "${nxp_sdk_root}/components/log/fsl_component_log.c",
      "${nxp_sdk_root}/components/log/fsl_component_log_backend_debugconsole.c",
      "${nxp_sdk_root}/components/messaging/fsl_component_messaging.c",
      "${nxp_sdk_root}/components/osa/fsl_os_abstraction_free_rtos.c",
      "${nxp_sdk_root}/components/phy/device/phyksz8081/fsl_phyksz8081.c",
      "${nxp_sdk_root}/components/serial_manager/fsl_component_serial_manager.c",
      "${nxp_sdk_root}/components/serial_manager/fsl_component_serial_port_uart.c",
      "${nxp_sdk_root}/components/timer_manager/fsl_component_timer_manager.c",

      #Framework files
      "${CONN_FRAMEWORK_SERVICES_FILES_PATH}/FunctionLib/FunctionLib.c",
    ]

    #OtaSupport files
    if (chip_enable_ota_requestor) {
      sources += [
        "${CONN_FRAMEWORK_SERVICES_FILES_PATH}/OtaSupport/Source/OtaExternalFlash.c",
        "${CONN_FRAMEWORK_SERVICES_FILES_PATH}/OtaSupport/Source/OtaPrivate.h",
        "${CONN_FRAMEWORK_SERVICES_FILES_PATH}/OtaSupport/Source/OtaSupport.c",
        "${CONN_FRAMEWORK_FILES_PATH}/platform/${rt_fwk_platform}/fwk_platform_ota.c",
        ]
    }
    if (chip_enable_ota_requestor || nxp_nvm_component == "nvs"){
      sources += [
        "${CONN_FRAMEWORK_FILES_PATH}/platform/${rt_fwk_platform}/fwk_platform_extflash.c",
      ]
    }

    if (nxp_nvm_component == "nvm_fwk") {
      sources += [
        "${CONN_FRAMEWORK_SERVICES_FILES_PATH}/FileSystem/fwk_filesystem.c",
        "${CONN_FRAMEWORK_SERVICES_FILES_PATH}/NVM/Source/NV_Flash.c",
        "${CONN_FRAMEWORK_FILES_PATH}/platform/${rt_fwk_platform}/fwk_platform_flash.c",
      ]
    }

    if (nxp_nvm_component == "key_storage") {
      sources += [
        "${nxp_sdk_root}/middleware/wireless/framework/FSAbstraction/fwk_fs_abstraction.c",
        "${nxp_sdk_root}/middleware/wireless/framework/FSAbstraction/fwk_lfs_mflash.c",
        "${nxp_sdk_root}/middleware/wireless/framework/FileCache/fwk_file_cache.c",
        "${nxp_sdk_root}/middleware/wireless/framework/KeyStorage/fwk_key_storage.c",
      ]
      sources += [
        #littlefs
        "${nxp_sdk_root}/middleware/littlefs/lfs.c",
        "${nxp_sdk_root}/middleware/littlefs/lfs_util.c",
      ]
    }

    if (nxp_nvm_component == "littlefs") {
      sources += [
        "${CONN_FRAMEWORK_SERVICES_FILES_PATH}/FileSystem/fwk_filesystem.c",
        "${CONN_FRAMEWORK_FILES_PATH}/platform/${rt_fwk_platform}/fwk_platform_flash.c",
      ]
      sources += [
        #littlefs
        "${nxp_sdk_root}/middleware/littlefs/lfs.c",
        "${nxp_sdk_root}/middleware/littlefs/lfs_util.c",
      ]
    }

    if (nxp_nvm_component == "nvs") {
      sources += [
        "${CONN_FRAMEWORK_ZEPHYR_FILES_PATH}/subsys/settings/src/settings.c",
        "${CONN_FRAMEWORK_ZEPHYR_FILES_PATH}/subsys/settings/src/settings_store.c",
        "${CONN_FRAMEWORK_ZEPHYR_FILES_PATH}/subsys/settings/src/settings_runtime.c",
        "${CONN_FRAMEWORK_ZEPHYR_FILES_PATH}/subsys/settings/src/settings_nvs.c",
        "${CONN_FRAMEWORK_ZEPHYR_FILES_PATH}/subsys/settings/src/settings_init.c",
      ]
      sources += [
        "${CONN_FRAMEWORK_ZEPHYR_FILES_PATH}/port/nvs/fwk_nvs_ExternalFlash.c",
        "${CONN_FRAMEWORK_ZEPHYR_FILES_PATH}/port/nvs/fwk_nvs_flash.c",
        "${CONN_FRAMEWORK_ZEPHYR_FILES_PATH}/subsys/fs/nvs/nvs.c",
        "${CONN_FRAMEWORK_ZEPHYR_FILES_PATH}/lib/crc/crc8_sw.c",
      ]
    }

    if (iwx12_transceiver) {
      sources += [ "${CONN_FRAMEWORK_FILES_PATH}/platform/imx_rt/iw612/fwk_platform_coex.c" ]
    }

    if (k32w0_transceiver) {
      sources += [
        "${CONN_FRAMEWORK_SERVICES_FILES_PATH}/OTW/k32w0_transceiver/fwk_otw.c",
        "${CONN_FRAMEWORK_FILES_PATH}/platform/imx_rt/k32w0/fwk_platform_coex.c",
      ]
    }

    if (!defined(public_configs)) {
      public_configs = []
    }

    if (!defined(public_deps)) {
      public_deps = []
    }

    public_configs += [ ":${sdk_target_name}_config" ]

    public_configs +=
        [ "${nxp_sdk_build_root}/${nxp_sdk_name}:nxp_transceiver_config" ]

    public_configs += [
      "${nxp_sdk_build_root}/${nxp_sdk_name}:nxp_lwip_base_config",
      "${nxp_sdk_build_root}/${nxp_sdk_name}:lwip_rt_config",
    ]

    public_configs += [ "" + nxp_sdk_driver_target + "_config" ]

    if (chip_enable_ble) {
      public_configs +=
          [ "${nxp_sdk_build_root}/${nxp_sdk_name}:nxp_bt_ble_config" ]
    }
    if (chip_enable_wifi) {
      public_configs +=
          [ "${nxp_sdk_build_root}/${nxp_sdk_name}:nxp_wifi_config" ]
    }

    all_dependent_configs = public_configs
  }
}
