# Copyright (c) 2022 Project CHIP Authors
# Copyright 2023,2024 NXP
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/nxp_sdk.gni")

declare_args() {
  # Indicates the name of the nxp platform targeted
  nxp_platform = ""

  # Indicates the name of the device targeted
  nxp_device = ""

  # Indicates the name of the board
  nxp_board = ""

  # Specifies the CHIP_DEVICE_LAYER_TARGET in src/platform/BUILD.gn
  nxp_device_layer = "nxp/common"

  # Defines the name of the nxp SDK target instance
  nxp_sdk_target = ""

  # Enables target nxp_lwip
  nxp_use_lwip = true

  # Enables target nxp_mbedtls
  nxp_use_mbedtls_port = true

  # Enables the support of the Matter CLI
  nxp_enable_matter_cli = false

  # Enables the support of the OT CLI
  nxp_enable_ot_cli = false

  # Enables the support of factory data
  nxp_use_factory_data = false

  # This mode allows to protect the matter factory dataset with a AES key protected in the secure element
  nxp_enable_secure_whole_factory_data = false

  # Enable EdgeLock 2Go secure DAC key and certificate provisionning 
  nxp_enable_secure_EL2GO_factory_data = false

  # Enable OTA multi-image processor for factory data OTA
  nxp_enable_ota_factory_data_processor = false

  # Enable OTA multi-image processor for app OTA
  nxp_enable_ota_firmware_processor = true

  # Enable usage of plaintext DAC private key (not recommended)
  nxp_use_plain_dac_key = false

  # Defines the NVM component supported
  nxp_nvm_component = "littlefs"

  # Enable wear statistics for key storage
  nxp_key_storage_wear_stats = false

  # Enables the auto pairing advertisement at boot
  nxp_enable_pairing_autostart = true

  # Indicates if the nxp SDK used has the SDK package format
  nxp_is_sdk_package = false

  # Indicates if the nxp SDK used has the nxp SDK internal format
  nxp_is_sdk_internal = false

  # Enables to use external sdk. If set to true, this removes the dependency on nxp_sdk
  nxp_external_sdk = false

  # Path to SDK root
  nxp_sdk_root = ""

  # Defines the current software version
  nxp_software_version = 1

  # Defines the current software string version
  nxp_software_version_string = "1.3"

  # ICD Matter Configuration flags
  nxp_ot_idle_interval_ms = 2000  # 2s Idle Intervals
  nxp_ot_active_interval_ms = 500  # 500ms Active Intervals

  nxp_idle_mode_duration_s = 600  # 10min Idle Mode Interval
  nxp_active_mode_duration_ms = 10000  # 10s Active Mode Interval
  nxp_active_mode_threshold_ms = 5000  # 5s Active Mode Threshold
  nxp_icd_supported_clients_per_fabric = 2  # 2 registration slots per fabric

  # Build Matter as a standalone lib (without gn dependencies on OT)
  nxp_build_matter_standalone_lib = false

  # Enable multiple BLE connections after commissioning feature.
  # This feature is platform specific and not standardized by Matter.
  nxp_multiple_ble_connections = false

  # Enable app usage of SMU2
  nxp_use_smu2_static = false

  # Enable app usage of extra SMU2 after commissioning
  nxp_use_smu2_dynamic = false

  # Enable hardware acceleration of SHA256 operations
  nxp_use_hw_sha256 = false

  # Enable hardware acceleration of AES operations
  nxp_use_hw_aes = false

  # Enable adding SDK sources needed by apps with dimmable LED
  nxp_config_dimmable_led = false

  # Enable low power support
  nxp_use_low_power = false

  # Define the openthread project lib config file
  nxp_ot_lib_config_file = "OpenThreadProjectLibConfig.h"
}

declare_args() {
  nxp_sdk_name = "${nxp_platform}_sdk"
}

if (nxp_is_sdk_package || getenv("NXP_SDK_ROOT") != "") {
  nxp_sdk_root = getenv("NXP_SDK_ROOT")
} else if (host_os == "win") {
  # On Windows, the bootstrap script creates a symbolic link to the
  # actual github SDK path using mklink. This is mandatory in order to
  # build reference applications, because of the long paths limitation.
  nxp_sdk_root = "C:/NXP/sdk/sdk_next/repo/mcuxsdk"
} else {
  nxp_sdk_root = "${nxp_sdk_matter_support_root}/github_sdk/sdk_next/repo/mcuxsdk"
}

assert(nxp_platform != "", "nxp_platform should be defined")
