# Copyright (c) 2020 Project CHIP Authors\
# Copyright 2024 NXP
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("//build_overrides/build.gni")
import("//build_overrides/chip.gni")

import("//build_overrides/nxp_sdk.gni")

import("//build_overrides/mbedtls.gni")
import("//build_overrides/openthread.gni")

import("${build_root}/config/compiler/compiler.gni")
import("${chip_root}/src/crypto/crypto.gni")

import("${chip_root}/src/platform/device.gni")

import("${chip_root}/src/lib/core/core.gni")
import("${chip_root}/src/platform/nxp/${nxp_platform}/args.gni")

import("${chip_root}/examples/common/pigweed/pigweed_rpcs.gni")

import("${nxp_sdk_build_root}/${nxp_sdk_name}/core_sdk.gni")
import("${nxp_sdk_build_root}/${nxp_sdk_name}/middleware_sdk.gni")

openthread_nxp_root = "${chip_root}/third_party/openthread/ot-nxp"

assert(nxp_sdk_root != "", "nxp_sdk_root must be specified")

assert(!((nxp_use_smu2_static && !chip_openthread_ftd) ||
         (nxp_use_smu2_dynamic && !chip_openthread_ftd)),
       "SMU2 can be used as system memory only with OT-FTD suppport")

forward_variables_from(core_sdk, "*")
forward_variables_from(middleware_sdk, "*")

# Defines an k32w1 SDK build target.
#
# Parameters:
#   nxp_sdk_root - The location of the k32w1 SDK.
#   sources - Extra source files to build.
template("${nxp_platform}_sdk") {

  assert(
      nxp_enable_ota_factory_data_processor == false ||
          nxp_use_factory_data,
      "Please set nxp_use_factory_data=true if using default factory data processor.")

  sdk_target_name = target_name

  config("${sdk_target_name}_config") {
    include_dirs = []
    if (defined(invoker.include_dirs)) {
      include_dirs += invoker.include_dirs
    }

    # We want to treat SDK headers as system headers, so that warnings in those
    # headers are not fatal.  Therefore don't add them directly to include_dirs;
    # we will add them to cflags below instead.
    _sdk_include_dirs = []
    _sdk_include_dirs += core_include_dirs
    _sdk_include_dirs += middleware_include_dirs

    _sdk_include_dirs += [
      "${openthread_nxp_root}/third_party/k32w1_sdk",
    ]

    if (nxp_device == "MCXW727C") {
      _sdk_include_dirs += [
        "${openthread_nxp_root}/third_party/mcxw72_sdk",
      ]
    } else {
      _sdk_include_dirs += [
        "${openthread_nxp_root}/third_party/k32w1_sdk",
      ]
    }

    if (nxp_config_dimmable_led) {
        _sdk_include_dirs += [
          "${COMPONENT_PWM_DIR_PATH}",
        ]
    }

    libs = [
      "${BLE_HOST_DIR_PATH}/host/lib/lib_ble_host_peripheral_cm33_gcc.a",
      "${FRAMEWORK_DIR_PATH}/SecLib/lib_crypto_m33.a",
    ]

    defines = []
    defines += core_defines
    defines += middleware_defines

    defines += [
      #MATTER-1308: move these platform specific defines to args.gni
      "NXP_OT_IDLE_INTERVAL=${nxp_ot_idle_interval_ms}",
      "NXP_OT_ACTIVE_INTERVAL=${nxp_ot_active_interval_ms}",
      "NXP_ICD_ENABLED=1",
      "NXP_ACTIVE_MODE_THRESHOLD=${nxp_active_mode_threshold_ms}",
      "NXP_ACTIVE_MODE_DURATION_MS=${nxp_active_mode_duration_ms}",
      "NXP_IDLE_MODE_DURATION_SEC=${nxp_idle_mode_duration_s}",
      "NXP_ICD_SUPPORTED_CLIENTS_PER_FABRIC=${nxp_icd_supported_clients_per_fabric}",
    ]

    if (chip_enable_openthread) {
      defines += [ "CHIP_DEVICE_CONFIG_ENABLE_THREAD=1" ]
    }

    if (chip_enable_ble) {
      defines += [ "CHIP_DEVICE_CONFIG_ENABLE_CHIPOBLE=1" ]
    }

    if (chip_enable_pw_rpc) {
      defines += [ "SERIAL_PORT_TYPE_UART_DMA=1" ]
    } else {
      defines += [ "SERIAL_PORT_TYPE_UART=1" ]
    }

    if (nxp_use_low_power && chip_logging == true) {
      print(
          "WARNING: enabling logs in low power might break the LP timings. Use at your own risk!")
      print("WARNING: set chip_logging=false to disable logging.")
    }

    if (nxp_use_low_power && nxp_enable_matter_cli) {
      print(
          "WARNING: enabling matter cli in low power might break the LP timings. Use at your own risk!")
    }

    if (nxp_multiple_ble_connections)
    {
      defines += [
        "USE_MULTIPLE_BLE_CONNECTIONS=1",
      ]
    }

    if (nxp_use_smu2_static) {
      defines += [
        "__STARTUP_CLEAR_SMU2",
        "USE_SMU2_AS_SYSTEM_MEMORY",
        "USE_SMU2_STATIC",
      ]
    }

    if (nxp_use_smu2_dynamic) {
      defines += [
        "USE_SMU2_AS_SYSTEM_MEMORY",
        "USE_SMU2_DYNAMIC",
      ]
    }

    if (nxp_use_factory_data) {
      defines += [
        "CONFIG_CHIP_PLAT_LOAD_REAL_FACTORY_DATA=1",
        # This should be deprecated and replaced with the above one
        "CONFIG_CHIP_LOAD_REAL_FACTORY_DATA=1",
        "gHwParamsAppFactoryDataExtension_d=1",
      ]
    }

    if (nxp_enable_ota_factory_data_processor) {
        defines += [ "CONFIG_CHIP_OTA_FACTORY_DATA_PROCESSOR=1" ]
    }

    if (nxp_use_low_power) {
      defines += [
        "nxp_use_low_power=1",
        "cPWR_UsePowerDownMode=1",
        "gAppLowpowerEnabled_d=1",
        "OSA_USED=1",
      ]

      if (chip_logging == false) {
        defines += [
          "K32W_LOG_ENABLED=0",
          "gUartDebugConsole_d=0",
        ]
      } else {
        defines += [
          "K32W_LOG_ENABLED=1",
          "gUartDebugConsole_d=1",
        ]
      }
    } else {
      defines += [
        "gAppLedCnt_c=2",
        "K32W_LOG_ENABLED=1",
        "gUartDebugConsole_d=1",
      ]
    }

    if (nxp_use_hw_sha256) {
      defines += [ "USE_HW_SHA256" ]
    }

    if (nxp_use_hw_aes) {
      defines += [ "USE_HW_AES" ]
    }

    if (nxp_software_version != "") {
      defines +=
          [ "NXP_CONFIG_DEVICE_SOFTWARE_VERSION=${nxp_software_version}" ]
    }

    if (nxp_software_version_string != "") {
      defines += [ "NXP_CONFIG_DEVICE_SOFTWARE_VERSION_STRING=\"${nxp_software_version_string}\"" ]
    }

    if (defined(invoker.defines)) {
      defines += invoker.defines
    }
    cflags = []

    if (defined(invoker.cflags)) {
      cflags += invoker.cflags
    }

    cflags += [
      "-Wno-unused-function",
      "-Wno-conversion",
      "-Wno-sign-compare",
      "-Wno-clobbered",
      "-Wno-implicit-fallthrough",
      "-fno-optimize-strlen",
      "-mthumb",
      "-MMD",
      "-MP",
    ]

    cflags += [
      # TODO After upgrading the compiler we started to see new error from address
      # warning. To allow PR that rolls up compiler we have suppress this warning
      # as an error temporarily.
      # see https://github.com/project-chip/connectedhomeip/issues/26221
      "-Wno-error=address",
    ]

    # Now add our "system-header" include dirs
    foreach(include_dir, _sdk_include_dirs) {
      cflags += [ "-isystem" + rebase_path(include_dir, root_build_dir) ]
    }
  }

  source_set(sdk_target_name) {
    forward_variables_from(invoker, "*")

    if (!defined(sources)) {
      sources = []
    }
    sources += core_sources
    sources += middleware_sources

      if (chip_enable_pw_rpc) {
        sources += [
          "${DRIVER_DMA3_DIR_PATH}/fsl_edma.c",
          "${DRIVER_LPUART_DIR_PATH}/fsl_lpuart_edma.c"
        ]
      }

    if (nxp_config_dimmable_led) {
        sources += [
          "${COMPONENT_PWM_DIR_PATH}/fsl_adapter_pwm_tpm.c",
          "${DRIVER_TPM_DIR_PATH}/fsl_tpm.c",
        ]
      }

    if (nxp_use_low_power) {
      sources += []
    }

    if (!defined(public_configs)) {
      public_configs = []
    }

    public_configs += [ ":${sdk_target_name}_config" ]
  }
}
